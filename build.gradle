plugins {
    id 'org.jetbrains.kotlin.jvm' apply false
    id 'org.jetbrains.dokka' apply false

    id 'io.gitlab.arturbosch.detekt' apply false

    id 'com.github.ben-manes.versions'
    id 'org.ajoberstar.grgit'
    id 'org.jetbrains.gradle.plugin.idea-ext'
}

dependencyUpdates.resolutionStrategy = {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean isNonFinalVersion = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]$qualifier[.\d-]*/
            }

            if (isNonFinalVersion) selection.reject('Release candidate')
        }
    }
}

subprojects {
    buildscript {
        repositories {
            jcenter()
        }
    }

    if (it.name == 'reporter-web-app') return

    // Apply core plugins.
    apply plugin: 'jacoco'

    // Apply third-party plugins.
    apply plugin: 'org.jetbrains.kotlin.jvm'
    apply plugin: 'org.jetbrains.dokka'
    apply plugin: 'io.gitlab.arturbosch.detekt'

    sourceSets {
        funTest {
            kotlin.srcDirs 'src/funTest/kotlin'
        }
    }

    repositories {
        jcenter()
    }

    dependencies {
        detektPlugins "io.gitlab.arturbosch.detekt:detekt-formatting:$detektPluginVersion"
    }

    plugins.withType(JavaLibraryPlugin) {
        dependencies {
            api 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'

            testImplementation "io.kotlintest:kotlintest-core:$kotlintestVersion"
            testImplementation "io.kotlintest:kotlintest-assertions:$kotlintestVersion"
            testImplementation "io.kotlintest:kotlintest-runner-junit5:$kotlintestVersion"
            testImplementation project(':test-utils')

            funTestImplementation sourceSets.main.output
            funTestImplementation sourceSets.test.output
            funTestImplementation configurations.testImplementation
            funTestRuntime configurations.testRuntime
        }
    }

    configurations.all {
        resolutionStrategy {
            // Ensure that all transitive versions of "kotlin-reflect" match our version of "kotlin-stdlib".
            force "org.jetbrains.kotlin:kotlin-reflect:$kotlinPluginVersion"
        }
    }

    compileKotlin {
        kotlinOptions {
            allWarningsAsErrors = true
            jvmTarget = '1.8'
            apiVersion = '1.3'
        }
    }

    compileTestKotlin {
        kotlinOptions {
            allWarningsAsErrors = true
            jvmTarget = '1.8'
            apiVersion = '1.3'
        }
    }

    compileFunTestKotlin {
        kotlinOptions {
            allWarningsAsErrors = true
            jvmTarget = '1.8'
            apiVersion = '1.3'
        }
    }

    detekt {
        // Align the detekt core and plugin versions.
        toolVersion = detektPluginVersion

        // Only configure differences to the default.
        buildUponDefaultConfig = true
        config = files('../detekt.yml')

        input = files('src/main/kotlin', 'src/test/kotlin', 'src/funTest/kotlin')
    }

    task funTest(type: Test) {
        description = 'Runs the functional tests.'
        group = 'Verification'

        classpath = sourceSets.funTest.runtimeClasspath
        testClassesDirs = sourceSets.funTest.output.classesDirs
    }

    // Enable JaCoCo only if a JacocoReport task is in the graph as JaCoCo
    // is using "append = true" which disables Gradle's build cache.
    gradle.taskGraph.whenReady { graph ->
        def enabled = graph.allTasks.any { it instanceof JacocoReport }

        tasks.withType(Test) {
            jacoco.enabled = enabled

            systemProperties = [
                    'kotlintest.tags.include': System.getProperty('kotlintest.tags.include'),
                    'kotlintest.tags.exclude': System.getProperty('kotlintest.tags.exclude')
            ]

            testLogging {
                events 'started', 'passed', 'skipped', 'failed'
                exceptionFormat 'full'
            }

            useJUnitPlatform()
        }
    }

    jacocoTestReport {
        reports {
            // Enable XML in addition to HTML for CI integration.
            xml.enabled true
        }
    }

    task jacocoFunTestReport(type: JacocoReport) {
        description = 'Generates code coverage report for the funTest task.'
        group = 'Reporting'

        executionData funTest
        sourceSets sourceSets.main

        reports {
            // Enable XML in addition to HTML for CI integration.
            xml.enabled true
        }
    }

    task jacocoReport {
        description = 'Generates code coverage reports for all test tasks.'
        group = 'Reporting'

        dependsOn tasks.withType(JacocoReport)
    }

    check.dependsOn funTest

    task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
        outputFormat = 'javadoc'
        outputDirectory = "$buildDir/javadoc"
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task dokkaJar(type: Jar, dependsOn: dokka) {
        classifier = 'dokka'
        from dokka.outputDirectory
    }

    task javadocJar(type: Jar, dependsOn: dokkaJavadoc) {
        classifier = 'javadoc'
        from dokkaJavadoc.outputDirectory
    }

    artifacts {
        archives sourcesJar
        archives dokkaJar
        archives javadocJar
    }
}

task checkCopyright(type: Exec) {
    description = 'Checks for HERE Copyright headers in Kotlin files.'
    group = 'Verification'

    commandLine 'git', 'grep', '-EL', 'Copyright.+HERE', '*.kt', ':!analyzer/src/funTest/assets/projects/external'
    ignoreExitValue = true
    standardOutput = new ByteArrayOutputStream()

    doLast {
        def output = standardOutput.toString().trim()
        if (!output.empty) {
            throw new GradleException("Please add copyright statements to the following Kotlin files:\n$output")
        }
    }
}

task check {
    description = 'Runs all checks.'
    group = 'Verification'

    dependsOn checkCopyright
}
